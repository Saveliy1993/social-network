{"version":3,"sources":["components/hoc/ifAuthComplete.js","components/LoginPage/Login.jsx"],"names":["mapStateToProps","state","isAuth","auth","LoginForm","props","validationSchema","yup","email","required","password","typeError","initialValues","rememberMe","validateOnBlur","onSubmit","values","actions","Promise","resolve","reject","Error","then","login","catch","errors","setFieldError","message","finally","setSubmitting","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","htmlFor","type","name","onChange","onBlur","value","disabled","onClick","general","compose","connect","Component","RedirectComponent","this","to","React"],"mappings":"4NAIIA,EAAkB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCErBE,EAAY,SAACC,GACf,IAAMC,EAAmBC,IAAW,CAChCC,MAAOD,MAAaC,MAAM,uBAAuBC,SAAS,qBAC1DC,SAAUH,MAAaI,UAAU,eAAeF,SAAS,0BAQ7D,OACI,cAAC,IAAD,CACIG,cAAe,CACXJ,MAAO,GACPE,SAAU,GACVG,YAAY,GAEhBC,gBAAc,EACdC,SAAU,SAACC,EAAQC,GAdZ,IAACT,KAeG,CAAEA,MAAOQ,EAAOR,OAfT,IAAIU,SAAQ,SAACC,EAASC,GAC9B,WAAVZ,GACAY,EAAO,IAAIC,MAAM,UAErBF,GAAQ,OAYKG,MAAK,WACAjB,EAAMkB,MAAMP,EAAOR,MAAOQ,EAAON,SAAUM,EAAOH,eAEvDW,OAAM,SAAAC,GACHR,EAAQS,cAAc,UAAUD,EAAOE,YAE1CC,SAAQ,WACLX,EAAQY,eAAc,OAGlCvB,iBAAkBA,EAnBtB,SAqBK,gBAAGU,EAAH,EAAGA,OAAQS,EAAX,EAAWA,OAAQK,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,eAAC,IAAD,WACI,8BACI,uBAAOC,QAAS,QAAhB,oBAAuC,uBACvC,cAAC,IAAD,CACIC,KAAM,OACNC,KAAM,QACNC,SAAUR,EACVS,OAAQR,EACRS,MAAOzB,EAAOR,WAGrBsB,EAAQtB,OAASiB,EAAOjB,OAAS,kCAAKiB,EAAOjB,SAC9C,8BACI,uBAAO4B,QAAS,WAAhB,uBAA6C,uBAC7C,cAAC,IAAD,CACIC,KAAM,WACNC,KAAM,WACNC,SAAUR,EACVS,OAAQR,EACRS,MAAOzB,EAAON,cAGrBoB,EAAQpB,UAAYe,EAAOf,UAAY,kCAAKe,EAAOf,YACpD,gCACI,cAAC,IAAD,CAAO4B,KAAK,aAAaD,KAAK,aAC9B,kDAIJ,wBACIK,UAAWT,IAAYE,EACvBQ,QAAST,EACTG,KAAM,SAHV,mBAKA,gCAASZ,EAAOmB,iBAmBrBC,sBAAQC,YAAQ,KAAM,CAAEvB,aDrFT,SAACwB,GAAe,IACpCC,EADmC,uKAGjC,OAAIC,KAAK5C,MAAMH,OAAe,cAAC,IAAD,CAAUgD,GAAG,aACpC,cAACH,EAAD,eAAeE,KAAK5C,YAJM,GACT8C,IAAMJ,WAMtC,OAAOD,YAAQ9C,EAAR8C,CAAyBE,KC8ErBH,EATG,SAACxC,GACf,OACI,gCACI,uCACA,cAAC,EAAD,eAAeA","file":"static/js/5.1c0e1f9b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport const ifAuthComplete = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth) return <Redirect to='/profile' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import { Formik, Field, Form } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as yup from 'yup';\r\nimport { login } from '../../redux/AuthReducer';\r\nimport { ifAuthComplete } from '../hoc/ifAuthComplete';\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    const validationSchema = yup.object({\r\n        email: yup.string().email('Enter correct email').required('Email is required'),\r\n        password: yup.string().typeError('Need string').required('Password is required')\r\n    })\r\n    const signUp = (email) => new Promise((resolve, reject) => {\r\n        if (email === '1@1.ru') {\r\n            reject(new Error('Allo?'))\r\n        }\r\n        resolve(true)\r\n    })\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false,\r\n            }}\r\n            validateOnBlur\r\n            onSubmit={(values, actions) => {\r\n                signUp({ email: values.email })\r\n                    .then(()=>{\r\n                        { props.login(values.email, values.password, values.rememberMe) }\r\n                    })\r\n                    .catch(errors=>{\r\n                        actions.setFieldError('general',errors.message)\r\n                    })\r\n                    .finally(()=>{\r\n                        actions.setSubmitting(false)\r\n                    })\r\n            }}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\r\n                <Form>\r\n                    <p>\r\n                        <label htmlFor={\"email\"}>Email:</label><br />\r\n                        <Field\r\n                            type={\"text\"}\r\n                            name={'email'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                        />\r\n                    </p>\r\n                    {touched.email && errors.email && <p> {errors.email}</p>}\r\n                    <p>\r\n                        <label htmlFor={\"password\"}>Password:</label><br />\r\n                        <Field\r\n                            type={'password'}\r\n                            name={'password'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                        />\r\n                    </p>\r\n                    {touched.password && errors.password && <p> {errors.password}</p>}\r\n                    <div>\r\n                        <Field name='rememberMe' type=\"checkbox\" />\r\n                        <span>\r\n                            remember me\r\n                        </span>\r\n                    </div>\r\n                    <button\r\n                        disabled={!isValid && !dirty}\r\n                        onClick={handleSubmit}\r\n                        type={'submit'}\r\n                    >Enter</button>\r\n                    <label >{errors.general}</label>\r\n\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm {...props} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default compose(connect(null, { login }),\r\n    ifAuthComplete\r\n)(LoginPage)"],"sourceRoot":""}