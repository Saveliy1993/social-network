{"version":3,"sources":["components/hoc/ifAuthComplete.js","components/LoginPage/Login.jsx"],"names":["mapStateToProps","state","isAuth","auth","LoginForm","props","validationSchema","yup","email","required","password","typeError","initialValues","rememberMe","validateOnBlur","onSubmit","values","login","captcha","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","htmlFor","type","name","onChange","onBlur","value","captchaUrl","src","disabled","onClick","general","compose","connect","Component","RedirectComponent","this","to","React"],"mappings":"6NAIIA,EAAkB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCErBE,EAAY,SAACC,GACf,IAAMC,EAAmBC,IAAW,CAChCC,MAAOD,MAAaC,MAAM,uBAAuBC,SAAS,qBAC1DC,SAAUH,MAAaI,UAAU,eAAeF,SAAS,0BAG7D,OACI,cAAC,IAAD,CACIG,cAAe,CAAEJ,MAAO,GAAIE,SAAU,GAAIG,YAAY,GACtDC,gBAAc,EACdC,SALO,SAACC,GAAaX,EAAMY,MAAMD,EAAOR,MAAOQ,EAAON,SAAUM,EAAOH,WAAYG,EAAOE,UAM1FZ,iBAAkBA,EAJtB,SAMK,gBAAGU,EAAH,EAAGA,OAAQG,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,eAAC,IAAD,WACI,8BACI,uBAAOC,QAAS,QAAhB,oBAAuC,uBACvC,cAAC,IAAD,CACIC,KAAM,OACNC,KAAM,QACNC,SAAUR,EACVS,OAAQR,EACRS,MAAOf,EAAOR,WAGrBY,EAAQZ,OAASW,EAAOX,OAAS,kCAAKW,EAAOX,SAC9C,8BACI,uBAAOkB,QAAS,WAAhB,uBAA6C,uBAC7C,cAAC,IAAD,CACIC,KAAM,WACNC,KAAM,WACNC,SAAUR,EACVS,OAAQR,EACRS,MAAOf,EAAON,cAGrBU,EAAQV,UAAYS,EAAOT,UAAY,kCAAKS,EAAOT,YACpD,gCACI,cAAC,IAAD,CAAOkB,KAAK,aAAaD,KAAK,aAC9B,kDAIHtB,EAAM2B,YAAc,qBAAKC,IAAK5B,EAAM2B,aACpC3B,EAAM2B,YAAc,cAAC,IAAD,CAAOJ,KAAK,UAAUD,KAAK,SAChD,wBACIO,UAAWX,IAAYE,EACvBU,QAASX,EACTG,KAAM,SAHV,mBAKA,gCAASR,EAAOiB,iBAwBrBC,sBAAQC,aANC,SAACrC,GACrB,MAAQ,CACJ+B,WAAY/B,EAAME,KAAK6B,cAIiB,CAAEf,aDxEpB,SAACsB,GAAe,IACpCC,EADmC,uKAGjC,OAAIC,KAAKpC,MAAMH,OAAe,cAAC,IAAD,CAAUwC,GAAG,aACpC,cAACH,EAAD,eAAeE,KAAKpC,YAJM,GACTsC,IAAMJ,WAMtC,OAAOD,YAAQtC,EAARsC,CAAyBE,KCiErBH,EAdG,SAAChC,GACf,OACI,gCACI,uCACA,cAAC,EAAD,eAAeA","file":"static/js/5.ca816027.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport const ifAuthComplete = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth) return <Redirect to='/profile' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import { Formik, Field, Form } from 'formik';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as yup from 'yup';\r\nimport { login } from '../../redux/AuthReducer';\r\nimport { ifAuthComplete } from '../hoc/ifAuthComplete';\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    const validationSchema = yup.object({\r\n        email: yup.string().email('Enter correct email').required('Email is required'),\r\n        password: yup.string().typeError('Need string').required('Password is required')\r\n    })\r\n    const submit = (values) => { props.login(values.email, values.password, values.rememberMe, values.captcha) }\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', rememberMe: false }}\r\n            validateOnBlur\r\n            onSubmit={submit}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\r\n                <Form>\r\n                    <p>\r\n                        <label htmlFor={\"email\"}>Email:</label><br />\r\n                        <Field\r\n                            type={\"text\"}\r\n                            name={'email'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                        />\r\n                    </p>\r\n                    {touched.email && errors.email && <p> {errors.email}</p>}\r\n                    <p>\r\n                        <label htmlFor={\"password\"}>Password:</label><br />\r\n                        <Field\r\n                            type={'password'}\r\n                            name={'password'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                        />\r\n                    </p>\r\n                    {touched.password && errors.password && <p> {errors.password}</p>}\r\n                    <div>\r\n                        <Field name='rememberMe' type=\"checkbox\" />\r\n                        <span>\r\n                            remember me\r\n                        </span>\r\n                    </div>\r\n                    {props.captchaUrl && <img src={props.captchaUrl} />}\r\n                    {props.captchaUrl && <Field name='captcha' type='text' />}\r\n                    <button\r\n                        disabled={!isValid && !dirty}\r\n                        onClick={handleSubmit}\r\n                        type={'submit'}\r\n                    >Enter</button>\r\n                    <label >{errors.general}</label>\r\n\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm {...props} />\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        captchaUrl: state.auth.captchaUrl\r\n    })\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, { login }),\r\n    ifAuthComplete\r\n)(LoginPage)\r\n"],"sourceRoot":""}